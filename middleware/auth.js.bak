require("dotenv").config();
const jwt = require('jsonwebtoken'); 

const handle = async (req, res, next) => {
    const { API_KEY } = process.env;
    const { headers, body, params, query , url , method } = req;

    const url_other = [
       ['POST' , '/api/notification/NotiSearch'] ,
       ['GET' , '/api/notification'] ,
       ['POST' , '/api/external/token'] ,  
    ];

    const url_jwt = [
        ['POST','/api/external/smartdashboard'],
        ['POST','/api/external/updatepart'],
        ['POST','/api/external/partusing'],
<<<<<<< Updated upstream
        ['POST','/api/external/updateProductInfo'],
=======
        ['POST','/api/external/repairData'],
>>>>>>> Stashed changes
    ];

    const url_jwtOrclient = [
        ['POST','/api/external/checkTradeIn'],
        ['POST','/api/external/createTradeIn']
    ];

    const checkpath_other = url_other.filter((value) => (value[0] == method) && (value[1] == `/api${url}`)).length

    const checkpath_jwt = url_jwt.filter((value) => (value[0] == method) && (value[1] == `/api${url}`)).length;

    const checkpath_jwtOrClient = url_jwtOrclient.filter((value) => (value[0] == method) && (value[1] == `/api${url}`)).length;

    if(checkpath_jwt){
        console.log('Need jwt');
        // Header names in Express are auto-converted to lowercase
        let token = req.headers['x-access-token'] || req.headers['authorization']; 

        // Remove Bearer from string
        token = token.replace(/^Bearer\s+/, "");

        if (token) {
            if(process.env.JWT_SECRET){
                jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
                    if (err) {
                        return res.json({
                            success: false,
                            message: 'Token is not valid'
                        });
                    }
                    req.decoded = decoded;
                    next();
                });
            }
            else{
                next();
            }
        } else {
            return res.status(403).json({
                success: false,
                message: 'Bearer Toekn is not specified.',
                result: null
            })
        } 
    }
    else if(checkpath_jwtOrClient){
        console.log('Need Jwt or API Key');
        let token = req.headers['x-access-token'] || req.headers['authorization']; 

        // Remove Bearer from string
        token = token.replace(/^Bearer\s+/, "");

        if (token) {
            if(process.env.JWT_SECRET){
                jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
                    if (err) {
                    return res.json({
                        success: false,
                        message: 'Token is not valid'
                    });
                    }
                    req.decoded = decoded;
                    next();
                });
            }
            else{
                next();
            }
        }
        else if(headers.api_key && !checkpath_other){
            return next();
        }
        else{
            return res.status(403).json({
                success: false,
                message: 'Token is null.',
                result: null
            })
        }
    }
    else if(checkpath_other) {
        return next();
    } else if(!headers.api_key && !checkpath_other) {
        return res.status(403).json({
            success: false,
            message: 'Token is null.',
            result: null
        })
    } else if(API_KEY == headers.api_key && !checkpath_other) {
        return next();
    } else {
        return res.status(403).json({
            success: false,
            message: 'Access Denied.',
            result: null
        })
    }
    
}

module.exports = handle;